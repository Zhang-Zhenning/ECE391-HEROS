# BUGLOG

## CP 3.1

    * BUG1 - in i8259.c, the interrupt of master irq port 2 (the cascaded port to the slave) is not enabled whenever 
             the slave port is enabled. Instead, this cascaded port has to be enabled individually and in the 
             initialization this port is indeed enabled. This may cause a problem because if this cascaded port is 
             disabled, the slave lines may have no chance to be enabled.
    * FIX  - add a enablement of this cascaded port whenever a slave interrupt line is enabled.

    * BUG2 - in i8259.c, there are 3 functions with input parameters, but without exception checking. For example, 
             if the irq_num which is larger than 16 is transferred, there is no coping mechanism and there may have problems.
    * FIX  - add a input check so that if a invalid parameter is input, the function will directly returned and do nothing.

    * BUG3 - in i8259.c, a small problem arises because a single function call mismatches the function name (enable_irq). 
    * FIX  - fix the function call name.

    * BUG4 - in kernal.c, we found that rtc do not work. After checking the code, we found that outb argument format shold 
             be (data, port) rather than (port, data)
    * FIX  - switch the order of arguments and solve this problem

    * BUG5 - in boot.S, in function init_page_register, we need to set the initial value of CR0,CR3,CR4. We set CR0 firstly, 
             then the other two, which will lead to crash of kernel. Since we fill the directory firstly, and the first 
             entry of directory is indicating a 4MB page.
    * FIX  - switch the initialization order of the three registers and set CR0 in the end.

    * BUG6 - in kernel.c, in function init_IDT, after we fill the whole IDT table, we forget to load IDTR. That will also 
             leads to crash of the kernel.
    * FIX  - call the lidt function at the end of init_IDT

## CP 3.2

    * BUG1 - in terminal.c, we use a variable "capital" to indicate the current situation whether the letter should be capital.
             And we ignore that if we only press caplock, we will not print out the shifted character of the nums.
    * FIX  - Use a new variable "shift_on" to indicate that only shift is pressed.

    * BUG2 - in the rtc.c, writ() fails to prevent some illegal frequencies.
    * FIX  - There are two causes. One is that I made a mistake in calculating the min_rate (highest frequency). The
             is that I previously clipped illegal value instead of returning -1.

    * BUG3 - in terminal.c, firstly we ignore the exit number of for loop. That is, we set for(i=0;i<= nbytes;i++), but
             we forget, after the loop, i is nbytes+1. The result is, if we want to read 10 characters, only 9 will be read.
    * FIX  - We subtract 1 from i after the loop if it reaches the end of the loop.s

    * BUG4 - in lib.c, when we update the position of cursor, firstly the system will return with noting printed on screen.
    * FIX  - we forget the order of port and data in OUTB. So we just change the order and then the cursor behaves normally.s

    * BUG5 - in test, when we open a file, the file descriptor is always 0, though in the file_open function it's not.
             therefore, when we want to close this file, it will say that we cannot close stdin.
    * FIX  - in the test function, the expression fd = sys_open((uint8_t *) valid_test_file[i] ) == -1 will firstly compute
             the result of bool operation, then assign it to fd. So fd is always 0. It's fixed by simply add a pair of parentheses.

    * BUG6 - Whenever initialize the file system, a exception with number 14 will occur. This exception corresponds to page fault, 
             So maybe some memory position is accessed wrongly.
    * FIX  - we have to first initialize the file system then the paging in the entry function. Or the file system may be changed
             by the paging system and cause the paging fault.

    * BUG7 - in some wrappers like dir_write, the arguments are not used, causing some warnings while compiling.
    * FIX  - we found a magic expression like "(void) fd" to use the arguments nominally to avoid warnings.

    * BUG8 - a collection of bugs of small typos and missing of headers.
    * FIX  - using printf() and gdb to locate these bugs and correct them correspondingly.

## CP 3.3

    * BUG1 - in boot.S, when we write the system call linkage, we forget to ensure ebx is at the top of the stack. Instead we put eax at
             the top of stack. That will result in a page fault since 0x05 is not activated by our paging system
    * FIX  - Ensure ebx is the last one to push

    * BUG2 - in process.c, when we check the return value of set_page_for_task, it will never be zero for pid is set to be unsigned,
             and it will never raise error.
    * FIX  - change it to be signed type.

    * BUG3 - in process.c, at first I didn't handle the case when the user is trying to exit the base shell.
           - then I check the condition and force the halt of base shell (last process) to be invalid
           - however, the main() of shell would return on entering exit, therefore I instead init a new shell when the base shell is halted. 

    * BUG4 - in file_sys.c, originally we mistakenly thought that the file struct in the file array is the process control block (not
             reading the document carefully), and the process struct is built wrongly.
    * FIX  - a correct structure of process control block and file struct is constructed.

    * BUG5 - when writing sanity checks, we check the validity of the "**args" argument sent to the parse_args function. If the pointer is 
             a NULL pointer then print error messages and return -1. However, not all commands have arguments. Some commands like "ls" are
             without additional arguments. This sanity check results in error messages in every command input.
    * FIX  - delete the sanity check in parse_arg function. The sanity check should be left to the user program.

    * BUG6 - in page_lib.c, when we setup the page directory entry for new process, we set it at the 128MB entry of page directory at first. That
             is an error since actually we only need to consider the first 10 bits, that is, 32. As a result, a
             page exception is raised.
    * FIX  - Set 32th entry instead of 128MB.

## CP 3.4
    * BUG1 - in sys_call.c, when we want to set video page for the vidmap program, we forget to set a new page table with user priority. Instead we use
             the previous defined page_table0 (kernel priority) as the new entry in page directory, that will cause EXCEPTION 14
    * FIX  - setup a new page table with priority 1 and use this page to access the video memory region

    * BUG2 - in sys_call.c. When we run the syserr program, it reports many errors concerning the return values about not opened file and terminal
             IOs. I thought that read a unopened file is not a serious problem, only a warning message is enough. But it turns out that the
             test needs this requires.
    * FIX  - change the return values to the correct ones.


## CP 3.5
    * BUG1 - in scheduler.c, when we manipulate the task linked list, we write a wrong function called insert_to_list_head. That function will insert a node
             to the head of the list by switching the prev and next field. However, our main method to change the list is another function called append_to_list_end. That will
             cause an internal detachment of our linked list since we use both of two functions.
    * FIX  - stop using insert_to_list_head. Only using delete_from_list and append_to_list_end

    * BUG2 - in signal_sys_call.c, when we do signal check, we forget to check whether there is a switch from kernel to user or not. That will damage the system since signal
             should only be check when return from Exception Interrupt and System call.
    * FIX  - we check whether cs of hardware context on stack is USER_CS, otherwise we just return.

    * BUG3 - In terminal.c, when we do ctrl+c, the screen will output a "c" character. This problem is caused by I input the c character in the line buffer.
    * FIX  - Before putting anything into the line buffer, I first check whether ctrl+c is happening. If so, just return.

    * BUG4 - When we execute hello, and input our name, the input will also gives it to shell.
             This is caused by we are both executing shell and hello, so they all receive our input and respond.
    * FIX  - In execute, we keep track of the current task's parent, and make it wait for the child to return.

    * BUG5 - When initializing the backup buffer page tables, we mistakenly thought that the size of a page table is 4KB so we iterated 4096 times. So some page 
             tables are overwritten and therefore cause the page fault.
    * FIX  - When the page fault occurs, we use the gdb command "list *(eip)" to find the place where it comes from. It turns out the address 0xB8000 is not valid,
             which is very weird. Then we start from the beginning and check the initialization and find out this problem. It works after we change the iteration
             back to 1024 times.

    * BUG6 - In terminal.c, when we start to switch betweent the backup buffers and the virtual video memory, we forgot to load the real video memory page table first.
             If so, the entries indicating the backup buffers are empty and may cause page fault.
    * FIX  - We trace back to the place where it causes page fault and realize this problem. Then we add the part of loading the page_table0 first.
